// This file is auto-generated by @hey-api/openapi-ts
import { createClient, createConfig } from '@hey-api/client-fetch';
export const client = createClient(createConfig());
/**
 * Deploy a new fungible token contract.
 * The `launch` endpoint is used to deploy a new fungible token on the Mina blockchain.
 * It allows users to create a new token with customizable parameters such as symbol,
 * decimals, URI, and admin contract type (standard or advanced).
 *
 */
export const launchToken = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/launch'
    });
};
/**
 * Retrieve contract info
 * Retrieves detailed information about a contract.
 */
export const getContractInfo = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/info/contract'
    });
};
/**
 * Retrieve NFT Info
 * Retrieves detailed information about a Mina NFT V2.
 */
export const getNftV2Info = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/info/nft-v2'
    });
};
/**
 * Request Funds from Faucet
 * Requests funds from the faucet for testing purposes.
 */
export const faucet = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/faucet'
    });
};
/**
 * Retrieve information about a fungible token.
 * The `info` endpoint retrieves detailed information about a specific fungible token deployed on the Mina blockchain.
 *
 */
export const getTokenInfo = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/info/token'
    });
};
/**
 * Retrieve the balance of a specific token for an address.
 * The `balance` endpoint retrieves the balance of a specific fungible token for a given Mina address.
 *
 */
export const getTokenBalance = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/info/balance'
    });
};
/**
 * Generate proofs for signed token transactions.
 * The `prove` endpoint initiates the proof generation process for a set of signed token transactions.
 * It returns a job ID which can be used to check the status and retrieve the proofs or tx hashes using the `/proof` endpoint.
 *
 */
export const prove = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/transaction/prove'
    });
};
/**
 * Check the status of a proof generation job and retrieve proofs.
 * The `proof` endpoint allows you to check the status of a proof generation job initiated via the `/prove` endpoint.
 * It returns the status of the job and the proofs or tx hashes if they are ready.
 *
 */
export const getProof = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/transaction/proof'
    });
};
/**
 * Retrieve the status of a transaction by its hash.
 * The `tx-status` endpoint allows you to check the current status of a transaction on the Mina blockchain by providing the transaction hash. It returns whether the transaction has been applied, failed, or is still pending.
 *
 */
export const txStatus = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/transaction/status'
    });
};
/**
 * Mint new tokens to a specified address.
 * The `mint` endpoint allows authorized users to mint new tokens of a fungible token on the Mina blockchain.
 * This transaction increases the total supply of the token by creating new tokens and assigning them to a specified address.
 * The sender must have the authority to mint tokens, typically the admin of the token contract.
 *
 */
export const mintTokens = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/mint'
    });
};
/**
 * Transfer tokens from one address to another.
 * The `transfer` endpoint allows users to transfer tokens of a fungible token on the Mina blockchain from one address to another.
 * The sender must have sufficient balance and appropriate permissions to perform the transfer.
 *
 */
export const transferTokens = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/transfer'
    });
};
/**
 * Distribute tokens to multiple addresses via airdrop.
 * Allows users to distribute tokens to multiple addresses in a single transaction.
 * This is efficient for distributing tokens during events like token launches or community rewards.
 *
 */
export const airdropTokens = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/airdrop'
    });
};
/**
 * Place a bid on a token
 * Allows users to place a bid on an token.
 *
 */
export const tokenBid = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/bid/create'
    });
};
/**
 * Create an offer to sell tokens at a specified price.
 * Allows users to create an offer to sell a specified amount of tokens at a given price.
 *
 */
export const tokenOffer = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/offer/create'
    });
};
/**
 * Purchase tokens from an existing offer.
 * Allows users to purchase tokens from an existing offer on the Mina blockchain.
 * This endpoint facilitates the transaction where tokens are transferred from the offer address to the buyer's address in exchange for the specified price.
 *
 */
export const buyTokens = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/offer/buy'
    });
};
/**
 * Sell a token to the Bid contract.
 * Allows token owners to sell their tokens to the Bid contract.
 *
 */
export const sellTokens = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/bid/sell'
    });
};
/**
 * Withdraw a previously placed bid on an token.
 * Allows users to withdraw a bid they have previously placed using the `/bid` endpoint.
 * This transaction cancels the active bid, releasing any locked funds.
 *
 */
export const withdrawTokenBid = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/bid/withdraw'
    });
};
/**
 * Withdraw a previously made offer to sell a token.
 * Allows users to withdraw an offer they have previously made using the `/offer` endpoint.
 * This transaction cancels the active offer, releasing any locked tokens.
 *
 */
export const withdrawTokenOffer = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/offer/withdraw'
    });
};
/**
 * Update the bid whitelist
 * Allows administrators to update the whitelist of addresses permitted to interact with the Bid contract.
 * This is essential for managing participation in bidding processes, especially for controlled or private auctions.
 *
 */
export const updateTokenBidWhitelist = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/bid/whitelist'
    });
};
/**
 * Update the offer whitelist
 * Allows administrators to update the whitelist of addresses permitted to interact with the Offer contract.
 * This is essential for managing participation in offer processes, especially for controlled or private sales.
 *
 */
export const updateTokenOfferWhitelist = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/offer/whitelist'
    });
};
/**
 * Update the advanced admin whitelist
 * Allows administrators to update the whitelist of admin contracts.
 *
 */
export const updateTokenAdminWhitelist = (options) => {
    return (options?.client ?? client).post({
        ...options,
        url: '/token/admin/whitelist'
    });
};
//# sourceMappingURL=sdk.gen.js.map